/**
 * securityapi
 * The security APIs help you detect and block security threats.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/IPThreatDetectionResponse', 'model/ThreatDetectionBotCheckResponse', 'model/ThreatDetectionTorNodeResponse', 'model/UrlSsrfThreatDetectionRequestFull', 'model/UrlSsrfThreatDetectionResponseFull'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/IPThreatDetectionResponse'), require('../model/ThreatDetectionBotCheckResponse'), require('../model/ThreatDetectionTorNodeResponse'), require('../model/UrlSsrfThreatDetectionRequestFull'), require('../model/UrlSsrfThreatDetectionResponseFull'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveSecurityApiClient) {
      root.CloudmersiveSecurityApiClient = {};
    }
    root.CloudmersiveSecurityApiClient.NetworkThreatDetectionApi = factory(root.CloudmersiveSecurityApiClient.ApiClient, root.CloudmersiveSecurityApiClient.IPThreatDetectionResponse, root.CloudmersiveSecurityApiClient.ThreatDetectionBotCheckResponse, root.CloudmersiveSecurityApiClient.ThreatDetectionTorNodeResponse, root.CloudmersiveSecurityApiClient.UrlSsrfThreatDetectionRequestFull, root.CloudmersiveSecurityApiClient.UrlSsrfThreatDetectionResponseFull);
  }
}(this, function(ApiClient, IPThreatDetectionResponse, ThreatDetectionBotCheckResponse, ThreatDetectionTorNodeResponse, UrlSsrfThreatDetectionRequestFull, UrlSsrfThreatDetectionResponseFull) {
  'use strict';

  /**
   * NetworkThreatDetection service.
   * @module api/NetworkThreatDetectionApi
   * @version 1.2.0
   */

  /**
   * Constructs a new NetworkThreatDetectionApi. 
   * @alias module:api/NetworkThreatDetectionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the networkThreatDetectionDetectSsrfUrl operation.
     * @callback module:api/NetworkThreatDetectionApi~networkThreatDetectionDetectSsrfUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UrlSsrfThreatDetectionResponseFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check a URL for Server-side Request Forgery (SSRF) threats
     * Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
     * @param {module:model/UrlSsrfThreatDetectionRequestFull} request Input URL request
     * @param {module:api/NetworkThreatDetectionApi~networkThreatDetectionDetectSsrfUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UrlSsrfThreatDetectionResponseFull}
     */
    this.networkThreatDetectionDetectSsrfUrl = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling networkThreatDetectionDetectSsrfUrl");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UrlSsrfThreatDetectionResponseFull;

      return this.apiClient.callApi(
        '/security/threat-detection/network/url/ssrf/detect', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the networkThreatDetectionIsBot operation.
     * @callback module:api/NetworkThreatDetectionApi~networkThreatDetectionIsBotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThreatDetectionBotCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if IP address is a Bot client threat
     * Check if the input IP address is a Bot, robot, or otherwise a non-user entity.  Leverages real-time signals to check against known high-probability bots..
     * @param {String} value IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.
     * @param {module:api/NetworkThreatDetectionApi~networkThreatDetectionIsBotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThreatDetectionBotCheckResponse}
     */
    this.networkThreatDetectionIsBot = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling networkThreatDetectionIsBot");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ThreatDetectionBotCheckResponse;

      return this.apiClient.callApi(
        '/security/threat-detection/network/ip/is-bot', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the networkThreatDetectionIsThreat operation.
     * @callback module:api/NetworkThreatDetectionApi~networkThreatDetectionIsThreatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPThreatDetectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if IP address is a known threat
     * Check if the input IP address is a known threat IP address.  Checks against known bad IPs, botnets, compromised servers, and other lists of threats.
     * @param {String} value IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.
     * @param {module:api/NetworkThreatDetectionApi~networkThreatDetectionIsThreatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPThreatDetectionResponse}
     */
    this.networkThreatDetectionIsThreat = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling networkThreatDetectionIsThreat");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = IPThreatDetectionResponse;

      return this.apiClient.callApi(
        '/security/threat-detection/network/ip/is-threat', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the networkThreatDetectionIsTorNode operation.
     * @callback module:api/NetworkThreatDetectionApi~networkThreatDetectionIsTorNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThreatDetectionTorNodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if IP address is a Tor node server
     * Check if the input IP address is a Tor exit node server.  Tor servers are a type of privacy-preserving technology that can hide the original IP address who makes a request.
     * @param {String} value IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.
     * @param {module:api/NetworkThreatDetectionApi~networkThreatDetectionIsTorNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThreatDetectionTorNodeResponse}
     */
    this.networkThreatDetectionIsTorNode = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling networkThreatDetectionIsTorNode");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ThreatDetectionTorNodeResponse;

      return this.apiClient.callApi(
        '/security/threat-detection/network/ip/is-tor-node', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
