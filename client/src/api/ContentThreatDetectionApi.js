/**
 * securityapi
 * The security APIs help you detect and block security threats.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/StringAutomaticThreatDetection', 'model/StringInsecureDeserializationJsonDetection', 'model/StringSqlInjectionDetectionResult', 'model/StringXssProtectionResult', 'model/StringXxeDetectionResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/StringAutomaticThreatDetection'), require('../model/StringInsecureDeserializationJsonDetection'), require('../model/StringSqlInjectionDetectionResult'), require('../model/StringXssProtectionResult'), require('../model/StringXxeDetectionResult'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveSecurityApiClient) {
      root.CloudmersiveSecurityApiClient = {};
    }
    root.CloudmersiveSecurityApiClient.ContentThreatDetectionApi = factory(root.CloudmersiveSecurityApiClient.ApiClient, root.CloudmersiveSecurityApiClient.StringAutomaticThreatDetection, root.CloudmersiveSecurityApiClient.StringInsecureDeserializationJsonDetection, root.CloudmersiveSecurityApiClient.StringSqlInjectionDetectionResult, root.CloudmersiveSecurityApiClient.StringXssProtectionResult, root.CloudmersiveSecurityApiClient.StringXxeDetectionResult);
  }
}(this, function(ApiClient, StringAutomaticThreatDetection, StringInsecureDeserializationJsonDetection, StringSqlInjectionDetectionResult, StringXssProtectionResult, StringXxeDetectionResult) {
  'use strict';

  /**
   * ContentThreatDetection service.
   * @module api/ContentThreatDetectionApi
   * @version 1.2.0
   */

  /**
   * Constructs a new ContentThreatDetectionApi. 
   * @alias module:api/ContentThreatDetectionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the contentThreatDetectionAutomaticThreatDetectionString operation.
     * @callback module:api/ContentThreatDetectionApi~contentThreatDetectionAutomaticThreatDetectionStringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringAutomaticThreatDetection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Automatically detect threats in an input string
     * Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).
     * @param {String} value User-facing text input.
     * @param {module:api/ContentThreatDetectionApi~contentThreatDetectionAutomaticThreatDetectionStringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringAutomaticThreatDetection}
     */
    this.contentThreatDetectionAutomaticThreatDetectionString = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling contentThreatDetectionAutomaticThreatDetectionString");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = StringAutomaticThreatDetection;

      return this.apiClient.callApi(
        '/security/threat-detection/content/automatic/detect/string', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contentThreatDetectionCheckSqlInjectionString operation.
     * @callback module:api/ContentThreatDetectionApi~contentThreatDetectionCheckSqlInjectionStringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringSqlInjectionDetectionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check text input for SQL Injection (SQLI) attacks
     * Detects SQL Injection (SQLI) attacks from text input.
     * @param {String} value User-facing text input.
     * @param {module:api/ContentThreatDetectionApi~contentThreatDetectionCheckSqlInjectionStringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringSqlInjectionDetectionResult}
     */
    this.contentThreatDetectionCheckSqlInjectionString = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling contentThreatDetectionCheckSqlInjectionString");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = StringSqlInjectionDetectionResult;

      return this.apiClient.callApi(
        '/security/threat-detection/content/sql-injection/detect/string', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contentThreatDetectionCheckXxe operation.
     * @callback module:api/ContentThreatDetectionApi~contentThreatDetectionCheckXxeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringXxeDetectionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Protect text input from XML External Entity (XXE) attacks
     * Detects XXE (XML External Entity) attacks from XML text input.
     * @param {String} value User-facing text input.
     * @param {module:api/ContentThreatDetectionApi~contentThreatDetectionCheckXxeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringXxeDetectionResult}
     */
    this.contentThreatDetectionCheckXxe = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling contentThreatDetectionCheckXxe");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = StringXxeDetectionResult;

      return this.apiClient.callApi(
        '/security/threat-detection/content/xxe/detect/xml/string', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contentThreatDetectionDetectInsecureDeserializationJsonString operation.
     * @callback module:api/ContentThreatDetectionApi~contentThreatDetectionDetectInsecureDeserializationJsonStringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringInsecureDeserializationJsonDetection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect Insecure Deserialization JSON (JID) attacks in a string
     * Detects Insecure Deserialization JSON (JID) attacks from text input.
     * @param {String} value User-facing text input.
     * @param {module:api/ContentThreatDetectionApi~contentThreatDetectionDetectInsecureDeserializationJsonStringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringInsecureDeserializationJsonDetection}
     */
    this.contentThreatDetectionDetectInsecureDeserializationJsonString = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling contentThreatDetectionDetectInsecureDeserializationJsonString");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = StringInsecureDeserializationJsonDetection;

      return this.apiClient.callApi(
        '/security/threat-detection/content/insecure-deserialization/json/detect/string', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contentThreatDetectionProtectXss operation.
     * @callback module:api/ContentThreatDetectionApi~contentThreatDetectionProtectXssCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringXssProtectionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
     * Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
     * @param {String} value User-facing text input.
     * @param {module:api/ContentThreatDetectionApi~contentThreatDetectionProtectXssCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringXssProtectionResult}
     */
    this.contentThreatDetectionProtectXss = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling contentThreatDetectionProtectXss");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = StringXssProtectionResult;

      return this.apiClient.callApi(
        '/security/threat-detection/content/xss/detect/string', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
